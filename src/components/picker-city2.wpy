<style lang="scss" scoped>
@import "../css/picker";

.sections{
    width: 100%;
}


</style>
<template>
    <view class="sections">
        <view @tap="pickerShow">{{ provinceValue }} {{ cityValue }} {{ areaValue }}</view>
        <view class="picker-bg" style="display: {{ show ? 'block' : 'none' }};" @touchstart.stop="pickerHide"></view>
        <view class="picker-box" style="transform: translateY({{ top }}px); display: {{ show ? 'block' : 'none' }};">
            <view class="btn-box">
                <button class="cancel" @tap="pickerHide">取消</button>
                <button class="ok" @tap="pickerSure">确定</button>
            </view>
            <picker-view class="picker" indicator-style="height: 40px; line-height: 40px; background: rgba(0,0,0,.02); color: #f50;" value="{{ value }}" @change="change" @touchstart="changeReset">
                <picker-view-column>
                    <view wx:for="{{ province }}" wx:key="{{ index }}" class="item" data-id="{{ item[id] }}">{{ item[name] }}</view>
                </picker-view-column>
                <picker-view-column>
                    <view wx:for="{{ city }}" wx:key="{{ index }}" class="item" data-id="{{ item[id] }}">{{ item[name]  }}</view>
                </picker-view-column>
                <picker-view-column>
                    <view wx:for="{{ area }}" wx:key="{{ index }}" class="item" data-id="{{ item[id] }}">{{ item[name]  }}</view>
                </picker-view-column>
            </picker-view>
        </view>
    </view>
</template>
<script>
import wepy from 'wepy'

export default class PickerCity extends wepy.component {
	props = {
        cityData: {
            type: Object,
            default: {}
        },
        name: {
            type: String,
            default: 'name'
        },
        id: {
            type: String,
            default: 'id'
        }
	}

	data = {
        top: 300,
        show: false,
        provinceIndex: 0,
        cityIndex: 0,
        areaIndex: 0,
        provinceValue: '',
        cityValue: '',
        areaValue: '',
        provinceId: '',
        cityId: '',
        areaId: '',
        province: [],
        city: [],
        area: [],
        value: [9999, 1, 1]
    }

    makeData(provinceIndex, cityIndex, areaIndex) {

        this.provinceValue = this.province[provinceIndex][this.name]
        this.provinceId = this.province[provinceIndex][this.id]

        this.city = this.cityData.city[this.provinceId]
        if (!this.city) {
            this.city = []
            this.area = []
            return
        }
        this.cityValue = this.city[cityIndex][this.name]
        this.cityId = this.city[cityIndex][this.id]

        this.area = this.cityData.area[this.cityId] || []
        if (!this.area) {
            this.area = []
            return
        }
        this.areaValue = this.area[areaIndex][this.name]
        this.areaId = this.area[areaIndex][this.id]
    }

	methods = {
        change(e) {
            const val = e.detail.value
            this.changeP = val[0] + ''
            this.changeC = val[1] + ''
            this.changeA = val[2] + ''
            this.makeData(this.changeP, this.changeC, this.changeA)
        },
        changeReset() {
            this.changeP = this.changeC = this.changeA = null
        },
        pickerSure() {
            if (!this.changeP || !this.changeC || !this.changeA) { //防止滑动过程中点击按钮bug
                return
            }
            if (this.changeP !== true) {
                this.provinceIndex = this.changeP
                this.cityIndex = this.changeC
                this.areaIndex = this.changeA
            }

            this.top = 300
            this.makeData(this.provinceIndex, this.cityIndex, this.areaIndex)
            this.$emit('citychange', [this.provinceId, this.cityId, this.areaId])
            setTimeout(() => {
                this.show = false
                this.$apply()
            }, 500)
        },
        pickerShow() {
            this.show = true
            this.changeP = this.changeC = this.changeA = true
            setTimeout(() => {
                this.top = 0
                this.value = [this.provinceIndex, this.cityIndex, this.areaIndex]
                this.$apply()
            })
        },
        pickerHide() {
            if (!this.changeP || !this.changeC || !this.changeA) {
                return
            }
            this.top = 300
            this.makeData(this.provinceIndex, this.cityIndex, this.areaIndex)

            this.value = [0, 0, 0]
            setTimeout(() => {
                this.show = false
                this.$apply()
            }, 500)
        }
	}

	events = {
        cityInit(provinceIndex, cityIndex, areaIndex) {
            this.provinceIndex = provinceIndex
            this.cityIndex = cityIndex
            this.areaIndex = areaIndex
            this.province = this.cityData.province
            this.makeData(provinceIndex, cityIndex, areaIndex)
            this.$emit('citychange', [this.provinceId, this.cityId, this.areaId])
        }
    }
}
</script>
